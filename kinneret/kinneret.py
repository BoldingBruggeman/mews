import pygetm
import netCDF4
import numpy as np
import xarray
import cftime
import datetime
import os

jordan_flow = np.array(
    """
9.693774508
9.197666607
9.616626244
10.8767166
13.67925676
18.9935297
20.37128954
34.91874296
35.77479852
28.72908935
23.50122691
19.26817303
16.82694974
18.65801907
19.39684766
17.59108718
22.87796792
18.60467238
19.10399057
21.34166875
20.34481632
17.93484045
16.84141756
18.79233125
19.42593278
24.33008394
21.72505428
19.65492471
18.36405094
17.3676937
17.32471922
16.79950981
15.88227106
15.01459699
14.70157506
14.23532072
14.28511172
15.5432706
18.89319086
19.74556152
18.21930903
18.10750903
19.40740373
21.83635475
21.75733533
19.78364867
21.8795566
23.83617639
24.6577066
23.37593034
23.34642697
22.70825711
21.42532886
20.4085911
19.21858976
18.86426758
19.07416912
19.26114525
23.0909671
24.08861256
21.37842636
20.66558976
19.8933274
19.49118808
18.68550101
17.79245894
17.29817928
16.81012216
16.48437601
16.20931748
16.02108134
16.32314936
16.28320926
15.85614615
16.94799297
20.88039198
20.34645194
18.92858591
18.70261771
19.74823793
18.21635995
17.21041256
17.00697633
16.72105483
15.90258736
15.75596597
15.44333539
15.53576461
15.32554679
19.14274858
24.47895825
23.17959184
19.33516024
17.59884138
16.47439198
15.63897118
15.05576591
14.44120538
14.51045671
14.73217034
16.08726804
15.71863602
15.54332274
15.03941777
14.6513296
14.51583148
14.03604161
13.65402329
12.946027
12.47077804
12.650984
13.14406183
13.70360171
12.77077627
12.09243649
12.37405318
12.19473096
11.58338724
11.11930061
10.88555561
10.42946458
10.38485266
10.02182098
9.872709722
9.770115972
10.25463061
10.01347106
10.16484699
9.842255266
9.904068374
8.911019618
9.026330237
8.713658854
8.453498929
8.167575984
7.847544184
7.537220486
7.075680961
6.814552922
6.677791291
6.834444676
6.519740914
6.442986777
6.735681829
6.633594126
6.528456481
6.197948148
6.133850347
6.136396875
6.147116059
5.933193287
5.857143229
5.781522106
5.895352778
5.767174074
5.398960243
5.341711198
5.370360069
5.159146615
5.123266291
5.150949913
5.091625781
5.098347367
5.126988918
5.025132784
4.733000752
4.679788802
4.596636053
4.715530556
4.448743692
4.757960995
4.663075145
4.30054809
4.404419444
4.463334288
4.404569647
4.327781973
4.330915191
4.526393953
4.161954688
4.182022975
4.100143229
4.066263744
3.937535677
4.001967853
3.991458709
3.913005787
3.90439566
3.912965133
3.888109664
3.816673119
3.972785069
4.028123061
3.841110185
3.939850376
3.935593027
3.730043142
3.74264322
3.958882986
3.848261053
3.778398466
3.890849277
3.815499306
3.717020804
3.901157755
3.959141319
3.902680469
3.876739381
3.962611979
3.752330179
3.826257407
3.981910648
3.986832726
3.907923003
4.036657494
4.009914236
3.936328762
4.006337789
3.997873351
4.120370226
4.10877934
4.134149711
4.157755208
3.989466175
3.960557899
4.128537674
4.132115017
4.211395399
4.082154196
4.19549466
4.027886661
4.062598032
4.020547483
4.032561285
4.155448843
4.160300666
4.15706548
4.124769184
4.171937847
4.131262471
4.176277402
4.090590307
4.110204485
4.050605845
4.012978154
3.930585735
3.867539419
4.08301794
4.090819734
4.083329784
4.058790046
4.138448351
4.105246123
4.069308767
4.185065538
4.084762182
4.142880903
4.161242188
4.178996267
4.180881742
4.158976331
4.258631134
4.093608189
4.102557813
4.206517332
4.095273495
4.085293721
4.171035359
4.090028125
4.299091493
4.213176794
4.107910995
3.97845515
3.999787328
4.178452749
4.099020573
4.071083507
4.191102894
4.178293171
4.086660685
4.274763194
4.23672338
4.401242853
4.348584317
4.234431916
4.435405584
4.464279022
4.421535301
4.300057494
4.243227315
4.204733999
4.374971991
4.306351013
4.273577083
4.362506221
4.358028964
4.407468924
4.453885359
5.136890509
5.037010446
4.943327286
5.014102894
5.126851389
5.176031684
4.871882292
4.927751794
4.941244589
5.002359635
5.58463044
5.236073929
5.260591088
5.26481713
5.163063137
5.228773669
5.066762297
4.998592245
5.034222367
5.191250463
5.190843084
5.380212471
5.454553704
5.14297147
4.95752908
4.955375318
5.15634783
5.360789294
5.172229948
5.005264468
5.057082494
5.197370804
5.276393605
5.223252228
5.135681829
5.12644809
5.163967593
6.361466377
6.491206424
6.02562173
5.886534925
5.876356279
6.044615191
6.511227459
6.464671701
6.536370573
6.220792216
6.153113773
6.468570631
12.03632054
9.385620486
8.385116925
9.727685357
8.667513478
7.81460191
8.240599219
8.57699669
7.779612905
7.674603328
7.5245432
7.761908854
11.37689739
15.55088174
16.41356195
11.82823617
10.09369074
10.12022185
""".split(),
    dtype=float,
)
jordan_dates = cftime.num2date(np.arange(365), "days since 2015-01-01 00:00:00")
jordan_data = xarray.DataArray(jordan_flow, {"time": jordan_dates})

with netCDF4.Dataset("topo.nc") as nc:
    nc.set_auto_mask(False)
    domain = pygetm.domain.create_cartesian(
        nc["X"][:],
        nc["Y"][:],
        lon=nc["longitude"],
        lat=nc["latitude"],
        H=-nc["h"][:, :],
        mask=np.where(nc["h"][...] == 1.0e37, 0, 1),
        nz=47,
        Dmin=0.2,
        Dcrit=1.,
        z0=0.01
    )

jordan = domain.rivers.add_by_location("jordan", 35.613740, 32.886814, spherical=True)

sim = pygetm.Simulation(
    domain,
    runtype=pygetm.BAROCLINIC,
    #gotm=os.path.join('../../../../getm-setups/NorthSea', "gotmturb.nml"),
    airsea=pygetm.airsea.FluxesFromMeteo(calculate_evaporation=True),
    radiation=pygetm.radiation.TwoBand(jerlov_type=pygetm.Jerlov.Type_II),
    #fabm=pygetm.fabm.FABM('fabm.yaml', bioshade_feedback=True, repair=False)
)

ERA_path = 'era5_????.nc'
sim.airsea.u10.set(pygetm.input.from_nc(ERA_path, "u10"))
sim.airsea.v10.set(pygetm.input.from_nc(ERA_path, "v10"))
sim.airsea.t2m.set(pygetm.input.from_nc(ERA_path, "t2m") - 273.15)
sim.airsea.d2m.set(pygetm.input.from_nc(ERA_path, "d2m") - 273.15)
sim.airsea.sp.set(pygetm.input.from_nc(ERA_path, "sp"))
sim.airsea.tcc.set(pygetm.input.from_nc(ERA_path, "tcc"))
sim.airsea.tp.set(pygetm.input.from_nc(ERA_path, "tp") / 3600.0)
#sim.sst = sim.airsea.t2m

if jordan:
    jordan.flow.set(jordan_data, climatology=True)

domain.plot().savefig("kinneret_mesh.png")
domain.plot(show_mesh=False).savefig("kinneret_mask.png")

t = pygetm.input.from_nc("state.0000420768.t001 1.nc", "Temp").isel(T=0)
t = t.where(t != 0, np.nan)
s = pygetm.input.from_nc("state.0000420768.t001 1.nc", "S").isel(T=0)
s = s.where(s != 0, np.nan)
sim.temp.set(t, on_grid=pygetm.input.OnGrid.HORIZONTAL, mask=True)
sim.temp.all_values[np.isnan(sim.temp.all_values)] = np.nanmean(sim.temp.ma)
sim.salt.set(s, on_grid=pygetm.input.OnGrid.HORIZONTAL, mask=True)
sim.salt.all_values[np.isnan(sim.salt.all_values)] = np.nanmean(sim.salt.ma)

sim['selmaprotbas_nn'].set(30.)
sim['selmaprotbas_po'].set(30.)

sim.radiation.kc2.set(0.2)

output = sim.output_manager.add_netcdf_file(
    "kinneret.nc", interval=datetime.timedelta(days=1)
)
output.request("zt", "u1", "v1")
output.request("sst", "temp", "salt", "diatoms_c", "flagellates_c", "cyanobacteria_c", "selmaprotbas_o2")
output.request("uk", "vk", "ww", grid=sim.domain.T)

output = sim.output_manager.add_netcdf_file(
    "kinneret_monthly.nc", interval=1, interval_units=pygetm.TimeUnit.MONTHS
)
for variable in sim.fabm.model.state_variables:
    output.request(variable.output_name)

sim.start(cftime.datetime(2018, 1, 1), 8.0, 20, report=datetime.timedelta(hours=1))
while sim.time < cftime.datetime(2022, 12, 31):
    sim.advance()
    #sim.check_finite(False)
sim.finish()
